
String config_file = "./configuration/config.json"
//----------------------------------------------------------------------------------------
// Includes
//----------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------
// Mission Plan Description and Console Setup
//----------------------------------------------------------------------------------------
// Console Setup
Console.BackColor = ColorTools.Black;
Console.CurrentTextColor = ColorTools.White;
Console.Dimension = 35;
Console.DockMode = 3;
Console.WordWrap = 1;
Console.Show();

// Reports
Report "This Mission Plan calculates solar power available from a solar array which is fixed to the body frame of a Spacecraft." +
      @"You can view the effect of changing the Spacecraft attitude by selecting 'Changing Attitude' in the somewhere at the beginning of each run.\n" to Console;

Report "If you select 'Changing Attitude' the satellite will reorient to face the Sun (when the Sun is in view) when not over a ground station.\n" to Console;

//----------------------------------------------------------------------------------------
// Meta Struct Definition
//----------------------------------------------------------------------------------------
// Holds information about a specific solar panel
Struct SolarPanel;
	String Name;			// most likely describing location
	Variable Area; 			// m^2
	Variable Efficiency; 	// unitless
	Variable Power; 		// W, calculated
	Variable SunPanelAngle; // calculated
	Array Orientation;      // unit vector normal to panel
End;

// Holds information about the EPS 
Struct EPS_Struct;
	List<SolarPanel> Panels;
	Array SunBCS;
End;

// Holds vectors from the spacecraft TODO frame
Struct SpacecraftVectors;
	Vector ToSun;
	List<Vector> ToGroundStations;
End;

// Holds information about the ADCS
Struct ADCS_Struct;
	Variable State; // 0 tumbling, 1 fixed, 2 correct mode of operation
	SpacecraftVectors Vectors;
End;

// Holds information about the orbit of the spacecraft
Struct Orbit_ConfigStruct;
	Variable A;
	Variable E;
	Variable I;
	Variable RAAN;
	Variable W;
	Variable TA;
End;

// Holds the mass properties of the spacecraft
Struct MassProperties_ConfigStruct;
	Variable VehicleDryMass;
	Matric VehicleDryMOI;
End;

// Holds a Spacecraft and simulation metadata 
Struct MetaSpacecraft;
	Spacecraft sc;
	EPS_Struct EPS;
	ADCS_Struct ADCS;
End;

// Used to load data into a MetaSpacecraft Struct
Struct MetaSpacecraft_ConfigStruct;
	MassProperties_ConfigStruct MassProperties;
	Orbit_ConfigStruct Orbit;
	EPS_Struct EPS;
	ADCS_Struct ADCS;
End;

// Holds information about a GroundStation
Struct GroundStation_ConfigStruct;
	String Display_Name;
	Variable Height;
	Variable Latitude;
	Variable Longitude;
End;

// Used to load data into simulation objects
Struct Configuration;
	MetaSpacecraft_ConfigStruct Sapling;
	Array<GroundStation_ConfigStruct> GroundStations;
End;

Configuration config;

MetaSpacecraft MetaSC;
List<GroundStation> GroundStations;

//----------------------------------------------------------------------------------------
// Configuration Procedures
//----------------------------------------------------------------------------------------
Define Procedure LoadConfiguration(String filepath, Struct config_struct);
	JsonInterface JSON;
	JSON.DeserializeFromFile(filepath, config_struct);
	Report config to Console;
End;

Define Procedure LoadMetaSpacecraft(MetaSpacecraft_ConfigStruct msc_config, MetaSpacecraft msc);
	msc.sc.A = msc_config.Orbit.A;
	msc.sc.E = msc_config.Orbit.E;
	msc.sc.I = msc_config.Orbit.I;
	msc.sc.RAAN = msc_config.Orbit.RAAN;
	msc.sc.W = msc_config.Orbit.W;
	msc.sc.TA = msc_config.Orbit.TA;

	msc.sc.VehicleDryMass = msc_config.MassProperties.VehicleDryMass;
	msc.sc.VehicleDryMOI = msc_config.MassProperties.VehicleDryMOI;

	For PANEL_ITERATOR=0 to msc_config.EPS.Panels.Count-1;
		msc.EPS.Panels[PANEL_ITERATOR].Name = msc_config.EPS.Panels[PANEL_ITERATOR].Name;
		msc.EPS.Panels[PANEL_ITERATOR].Area = msc_config.EPS.Panels[PANEL_ITERATOR].Area;
		msc.EPS.Panels[PANEL_ITERATOR].Efficiency = msc_config.EPS.Panels[PANEL_ITERATOR].Efficiency;
		msc.EPS.Panels[PANEL_ITERATOR].Orientation = msc_config.EPS.Panels[PANEL_ITERATOR].Orientation;
	End;

	msc.ADCS.State = msc_config.ADCS.State;
End;

Define Procedure LoadGroundStation(GroundStation_ConfigStruct gs_struct, GroundStation gs);
	gs.DisplayName = gs_struct.Display_Name;
	gs.Height = gs_struct.Height;
	gs.Latitude = gs_struct.Latitude;
	gs.Longitude = gs_struct.Longitude;
End;

//----------------------------------------------------------------------------------------
// Configuration Proper
//----------------------------------------------------------------------------------------
String config_file = "./configuration/config.json"
ApiLabel "configuration";
Call LoadConfiguration(config_file, config);
Call LoadMetaSpacecraft(config.Sapling, MetaSC);
For GROUNDSTATION_ITERATOR=0 to config.GroundStations.Count-1;
	GroundStations.Count++;
	MetaSC.ADCS.Vectors.ToGroundStations.Count++; // on Vector per GroundStation
	Call LoadGroundStation(config.GroundStations[GROUNDSTATION_ITERATOR], GroundStations.Count[GROUNDSTATION_ITERATOR])
End;

//----------------------------------------------------------------------------------------
// Output Windows
//----------------------------------------------------------------------------------------
ViewWindow VwEarth({
	MetaSC.sc,
});

For GROUNDSTATION_ITERATOR=0 to config.GroundStations.Count-1;
	VwEarth.AddObject(GroundStations[GROUNDSTATION_ITERATOR]);
	VwEarth.AddObject(MetaSC.ADCS.Vectors.ToGroundStations[GROUNDSTATION_ITERATOR]);
End;

// TODO clean this up
DataTableWindow DataTable({
	MetaSC.sc.EpochText,
	MetaSC.EPS.Panels[0].SunPanelAngle, 
	MetaSC.EPS.Panels[0].Power,
	MetaSC.EPS.Panels[1].SunPanelAngle, 
	MetaSC.EPS.Panels[1].Power,
	MetaSC.EPS.Panels[2].SunPanelAngle, 
	MetaSC.EPS.Panels[2].Power,
	MetaSC.EPS.Panels[3].SunPanelAngle, 
	MetaSC.EPS.Panels[3].Power,
	MetaSC.EPS.Panels[4].SunPanelAngle, 
	MetaSC.EPS.Panels[4].Power,
	MetaSC.EPS.Panels[5].SunPanelAngle, 
	MetaSC.EPS.Panels[5].Power,
});

DataTable.WindowTitle = "Outputs";

PlotWindow PowerPlot({
	MetaSC.sc.ElapsedTime,
	MetaSC.EPS.TotalPower // TODO
});

PowerPlot.PlotType = "XYPlot";
PowerPlot.XAxis.Title.Text  = "Elapsed Time (Days)";
PowerPlot.YAxis.Title.Text = "Power (W)";
PowerPlot.ShowGridLines = 1;

ReportInterface ReportInterface1;

//----------------------------------------------------------------------------------------
// Slew Procedure TODO add error model control system accuracy
//----------------------------------------------------------------------------------------
Define Procedure SetSlewRate(Spacecraft slew, Variable maneuverTime, CoordinateSystem cs, Variable doConsoleOutput);
    // General Approach:
    //   Determine the orientation of the end frame with respect to the start frame.
    //   The euler axis of rotation is the normalization of the first three elements of the quaternion
    //   Set the Angular Velocity vector to point along this euler axis of rotation
    //   Propagate spacecraft until the slew angle is equal to the Euler Angle of Rotation

    // Obtain the attitude matrix depicting the starting orientation wrt the reference frame
    Spacecraft dummy = slew;
    dummy.AttitudeRefFrame = slew.AttitudeRefFrame;
    Matrix startAttitudeMatrix = dummy.AttitudeMatrix;

    // Obtain the attitude matrix depicting the ending orientation wrt the reference frame
    dummy.EulerSequence  = {1, 2, 3};
    dummy.EulerAngles = cs.GetEulerAngles("1-2-3");

    Console.CurrentFontType = 1;
    Matrix endAttitudeMatrix = dummy.AttitudeMatrix;

    // Transpose initial state and multiply by final to determine the matrix expressing
    // attitude frame 2 (end) with respect to attitude frame 1 (start)

    Matrix startToEndAttitudeMatrix =  startAttitudeMatrix.Transpose*endAttitudeMatrix;

    dummy.AttitudeMatrix = startToEndAttitudeMatrix;
    Array EulerAxisOfRotation = {dummy.Quaternion[0], dummy.Quaternion[1], dummy.Quaternion[2]};

    EulerAxisOfRotation =  EulerAxisOfRotation.Normalized();

    // Calculate Euler Angle of Rotation
    Variable EulerAngleOfRotation = deg((acos(0.5*((startToEndAttitudeMatrix[0,0] + 
    						                        startToEndAttitudeMatrix[1,1] + 
    						                        startToEndAttitudeMatrix[2,2]) - 1))));

    // Set slew rate to rotate in appropriate time
    Variable SlewRate = EulerAngleOfRotation/maneuverTime;

    slew.AngularVelocity[0] = SlewRate*EulerAxisOfRotation[0];
    slew.AngularVelocity[1] = SlewRate*EulerAxisOfRotation[1];
    slew.AngularVelocity[2] = SlewRate*EulerAxisOfRotation[2];

    Console.CurrentFontType = 0;
EndProcedure;

//----------------------------------------------------------------------------------------
// Contact and Visualization Setup
//----------------------------------------------------------------------------------------

// ThreeDModel Configuration
// Create ThreeDModel Object
ThreeDModel tdm;
tdm.LoadModel("../visualization/3u_structure.3ds");

// Apply 3D model to MetaSC.sc
MetaSC.sc.SetThreeDModel(tdm);
MetaSC.sc.BodyScale = 5000;
tdm.Scale    = 5000;
//EndBlock

//Block Vector Configuration
//Build the Vectors to represent contact with the ground sites we've specified
List<Vector> contactVects;
Vector sunContactVect;
Vector earthContactVect;

For GROUNDSTATION_ITERATOR in GroundStations.Count-1;
	contactVects.Count++;
	contactVects[GROUNDSTATION_ITERATOR].BuildVector(9, MetaSC.sc, GroundStations[GROUNDSTATION_ITERATOR]);
	contactVects[GROUNDSTATION_ITERATOR].Color  = ColorTools.Red;
	contactVects[GROUNDSTATION_ITERATOR].Active = 0;
End;

sunContactVect.BuildVector(9, MetaSC.sc, Sun);
sunContactVect.Color  = ColorTools.Gold;
sunContactVect.Active = 0;

earthContactVect.BuildVector(9, MetaSC.sc, Earth);
earthContactVect.Color  = ColorTools.Lime;
earthContactVect.Active = 0;

Vector vecAntiZ; // We do this because the 3D Model is backwards
vecAntiZ.BuildVector(3, sunContactVect);

Vector vecAntiEarth;
vecAntiEarth.BuildVector(3, earthContactVect);

CoordinateSystem csToSun;
CoordinateSystem csToEarth;
csToSun.BuildCoordinateSystem(3, vecAntiZ, 2, sunContactVect); // TODO double check this
csToEarth.BuildCoordinateSystem(3, vecAntiEarth, 2, earthContactVect);

//----------------------------------------------------------------------------------------
// Visibility Calculation
//----------------------------------------------------------------------------------------
VisibilitySegment toSun;
List<VisibilitySegment> toGroundStations;

toSun.AddOccultingBody(Earth, Moon, Mercury, Venus);
toSun.SetObserver(MetaSC.sc);
toSun.SetTarget(Sun);

For GROUNDSTATION_ITERATOR in GroundStations.Count-1;
	toGroundStations.Count++;
	toGroundStations[GROUNDSTATION_ITERATOR].AddOccultingBody(Earth);
	toGroundStations[GROUNDSTATION_ITERATOR].SetObserver(GroundStations[GROUNDSTATION_ITERATOR]);
	toGroundStations[GROUNDSTATION_ITERATOR].SetTarget(MetaSC.sc);
End;

//----------------------------------------------------------------------------------------
// Changing Attitude
//----------------------------------------------------------------------------------------
//Create a dummy Spacecraft for ViewWindow centering
Spacecraft viewCenter;
viewCenter.Position = MetaSC.sc.Position;
viewCenter.Velocity = MetaSC.sc.Velocity;

//Set up the ViewWindow for the fixed attitude system
ViewWindow vwFixed;
For GROUNDSTATION_ITERATOR in GroundStations.Count-1;
	vwFixed.AddObject(GroundStations[GROUNDSTATION_ITERATOR]);
	vwFixed.SetShowName(GroundStations[GROUNDSTATION_ITERATOR].Name, 1);
End;
vwFixed.AddObject(MetaSC.sc);
vwFixed.AddObject(contactVects[0]);
vwFixed.AddObject(contactVects[1]);
vwFixed.AddObject(sunContactVect);
vwFixed.AddObject(viewCenter);
vwFixed.SetShowName("MetaSC.sc", 1);
vwFixed.SetShowBody("viewCenter", 0);
vwFixed.AddObject(csToEarth);
vwFixed.AddObject(csToSun);

vwFixed.Viewpoints[0].ThreeDView.Source         = viewCenter.ObjectId;
vwFixed.Viewpoints[0].ThreeDView.Target         = viewCenter.ObjectId;
vwFixed.Viewpoints[0].ThreeDView.Radius         = 1500;
vwFixed.Viewpoints[0].ThreeDView.Declination    = -140;
vwFixed.Viewpoints[0].ThreeDView.RightAscension = 310;

//Set up the ViewWindow for the changing attitude system
ViewWindow vwChangingAttitude;
For GROUNDSTATION_ITERATOR in GroundStations.Count-1;
	vwChangingAttitude.AddObject(GroundStations[GROUNDSTATION_ITERATOR]);
	vwChangingAttitude.SetShowName(GroundStations[GROUNDSTATION_ITERATOR].Name, 1);
End;
vwChangingAttitude.AddObject(MetaSC.sc);
vwChangingAttitude.AddObject(contactVects[0]);
vwChangingAttitude.AddObject(contactVects[1]);
vwChangingAttitude.AddObject(sunContactVect);
vwChangingAttitude.AddObject(viewCenter);
vwChangingAttitude.SetShowName("MetaSC.sc", 1);
vwChangingAttitude.SetShowBody("viewCenter", 0);

vwChangingAttitude.AddObject(csToEarth);
vwChangingAttitude.AddObject(csToSun);

vwChangingAttitude.Viewpoints[0].ThreeDView.Source         = viewCenter.ObjectId;
vwChangingAttitude.Viewpoints[0].ThreeDView.Target         = viewCenter.ObjectId;
vwChangingAttitude.Viewpoints[0].ThreeDView.Radius         = 1500;
vwChangingAttitude.Viewpoints[0].ThreeDView.Declination    = -140;
vwChangingAttitude.Viewpoints[0].ThreeDView.RightAscension = 310;
//EndBlock

//----------------------------------------------------------------------------------------
// WindowOverlay Configuration
//----------------------------------------------------------------------------------------
WindowOverlay wo;
wo.RemoveAllShapes();
wo.AddShape();
wo.Shapes[0].TextOptions.AlignmentHorizontal = 0;
wo.Shapes[0].TextOptions.TextColor = ColorTools.White;
wo.Shapes[0].TextOptions.Font.Size = 16;
wo.Shapes[0].SetOrigin(0,0.01,0.01);
wo.Shapes[0].SetSize(0,0.6,0.12);

// Turn off default status text for the changing attitude ViewWindow
vwChangingAttitude.ShowStatusText = 0;
vwChangingAttitude.AddObject(wo);
vwChangingAttitude.WindowTitle = "MetaSC.sc View";

// Turn off default status text for the Fixed frame ViewWindow 
vwFixed.ShowStatusText = 0;
vwFixed.AddObject(wo);
vwFixed.WindowTitle = "MetaSC.sc View";

// Turn off default status text for the Earth-centered ViewWindow 
VwEarth.ShowStatusText = 0;

//----------------------------------------------------------------------------------------
// Variable Setup TODO add to configuration file
//---------------------------------------------------------------------------------------- 
TimeSpan EARTH_MANEUVER_TIME;
EARTH_MANEUVER_TIME = TIMESPAN(60 seconds);
TimeSpan SUN_MANEUVER_TIME;
SUN_MANEUVER_TIME = TIMESPAN(200 seconds);
Constant Variable sunManeuver   = 200;
Constant Variable earthManeuver = 60;

TimeSpan cacheEpoch;
Variable flag = 0;
Variable isSunSlew      = -1;
Variable inSunlight     = 0;
Variable isCharging     = 0;
Array inContactGroundStation[GroundStations.Count]; // zero-initialized

// Supposing this is constantly radiated by the Sun's whole surface, 
// the equation giving irradiance of a star of radius R and temperature K at a distance D is
// w=5.67⋅10−8⋅T^4(R/D)^2. Solving for the Sun, where T = 5778, R = 695700 and 
// D = 149600000 (1AU), gives us the value of 1366.7 W/m2.

// Variables for Panel Power calculations
Variable meanPower = 1366.7;			  
Variable meanSunDistance = 149530000; //1 AU

// Variables for shadow time calculations
Variable Shadow;
Variable ShadowPrev;

//----------------------------------------------------------------------------------------
// Attitude Setup
//----------------------------------------------------------------------------------------
Console.CurrentTextColor = ColorTools.Chocolate;
If (MetaSC.ADCS.State == 1);
	// The spacecraft is fixed therefore all angles and rates go to 0
	// Set Euler Angles 
	MetaSC.sc.EulerAngles[0] = 0;
	MetaSC.sc.EulerAngles[1] = 0;
	MetaSC.sc.EulerAngles[2] = 0;

	// Set attitude rate of MetaSC.sc
	MetaSC.sc.EulerRates[0] = 0;
	MetaSC.sc.EulerRates[1] = 0;
	MetaSC.sc.EulerRates[2] = 0;

	Report @"You chose a fixed attitude system.\n" to Console;
	Report  "Euler Angle 1: " + MetaSC.sc.EulerAngles[0].ToString() +  " deg"     to Console;
	Report  "Euler Angle 2: " + MetaSC.sc.EulerAngles[1].ToString() +  " deg"     to Console;
	Report  "Euler Angle 3: " + MetaSC.sc.EulerAngles[2].ToString() + @" deg\n"   to Console;
	Report  "Euler Rate 1: "  + MetaSC.sc.EulerRates[0].ToString()  +  " deg/s"   to Console;
	Report  "Euler Rate 2: "  + MetaSC.sc.EulerRates[1].ToString()  +  " deg/s"   to Console;
	Report  "Euler Rate 3: "  + MetaSC.sc.EulerRates[2].ToString()  + @" deg/s\n" to Console;
ElseIf;
	Report @"You chose a tumbling satellite.\n" to Console;
	
	// Set attitude rate of MetaSC.sc
	MetaSC.sc.EulerRates[0] = 0;
	MetaSC.sc.EulerRates[1] = 0;
	MetaSC.sc.EulerRates[2] = 0;
Else;
    Report @"You chose a changing attitude system.\n" to Console;
End;

//----------------------------------------------------------------------------------------
// Convenience Macros for updating panels
//----------------------------------------------------------------------------------------
Define Macro UpdatePanel(PANEL);
	MetaSC.EPS.Panels[PANEL].SunPanelAngle = MetaSC.EPS.Panels[PANEL].Orientation.VertexAngle(MetaSC.EPS.SunBCS);
	MetaSC.EPS.Panels[PANEL].Power = MetaSC.EPS.Panels[PANEL].Efficiency*meanPower*MetaSC.EPS.Panels[PANEL].Area*
									abs(cos(rad(MetaSC.EPS.Panels[PANEL].SunPanelAngle)))*
									MetaSC.sc.Range(Sun)/meanSunDistance;
EndMacro;

Define Macro SetPanelPowerToZero(PANEL);
	MetaSC.EPS.Panels[PANEL].Power = 0;
EndMacros;

//----------------------------------------------------------------------------------------
// Main Loop (Propagation)
//----------------------------------------------------------------------------------------
While (MetaSC.sc.ElapsedTime < TIMESPAN(8 hours));
	
	// Panel Orientation/Attitude Convert
	
	// MetaSC.sc.SunVector gives Sun position in MJ2000 coordinates
	// Transform the sun vector to BCS using AttitudeConvert
	MetaSC.EPS.SunBCS = AttitudeConvert(0, 3, MetaSC.sc, MetaSC.sc.SunVector);
	
	// Shadow Calculations
	
	If (MetaSC.sc.InShadow == 0);
		// Calculate the angle between sun vector and panel normal
		// & Calculate power from solar panel
		For i=0 to MetaSC.EPS.Panels.Count-1;
			UpdatePanel(i);
		End;
	ElseIf (MetaSC.sc.InShadow == 1);
		For i=0 to MetaSC.EPS.Panels.Count-1;
			SetPanelPowerToZero(i);
		End;
	End;
	
	Shadow = MetaSC.sc.InShadow;
	
	If (ShadowPrev != Shadow);
	    Console.CurrentTextColor = ColorTools.Khaki;
		If (Shadow == 1);
			Report MetaSC.sc.Epoch.ConvertToCalendarDate("Mmm DD hh:mm:ss"), ": Entering Shadow" to Console;
		Else;
			Report MetaSC.sc.Epoch.ConvertToCalendarDate("Mmm DD hh:mm:ss"), ": Leaving Shadow" to Console;
		End;
		ShadowPrev = Shadow;
	End;
	
	Console.CurrentTextColor = ColorTools.White;
	
	// Changing Attitude Setup
	If (MetaSC.ADCS.State == 0);

	    // Block Contact Analysis
	    // Determine contact with the ground sites first
	    If (toDurand.Visibility(MetaSC.sc.Epoch) == 1 and inContactDurand == 0);
	        inContactDurand = 1;
	    	contactVects[0].Active = 1;
	
	    	If(isCharging == 0);
	    		Console.CurrentTextColor = ColorTools.Khaki;
	    		Report "Charging has stopped... " to Console;
			End;
	
	    	Console.CurrentTextColor = ColorTools.Red;
	        Report "Contact with Durand has begun..." to Console;
	    End;

	    If (toSun.Visibility(MetaSC.sc.Epoch) == 1 and inSunlight == 0);
	        inSunlight = 1;
	        sunContactVect.Active = 1;
	    	isCharging = 0;
	        
	    	Console.CurrentTextColor = ColorTools.Khaki;
	    	Report "Charging has started..." to Console;
	        Console.CurrentTextColor = ColorTools.Khaki;
	    End;

	    If (toDurand.Visibility(MetaSC.sc.Epoch) == 0 and inContactDurand == 1);
	        inContactDurand = 0;
	    	contactVects[0].Active = 0;
	
	        Console.CurrentTextColor = ColorTools.Red;
	        Report "Contact with Durand has ended..." to Console;
	    End;

	    If (toSun.Visibility(MetaSC.sc.Epoch) == 0 and inSunlight == 1);
	        inSunlight = 0;
	    	isCharging = 1;
	        sunContactVect.Active = 0;
	        
	    	Console.CurrentTextColor = ColorTools.Khaki;
	    	Report "Charging has stopped... " to Console;
	        Console.CurrentTextColor = ColorTools.Khaki;
	    End;
	
	    // No contact on any groundstations 
	    If (inSunlight == 1);
	        Console.CurrentTextColor = ColorTools.Orange;
	    	MetaSC.sc.Propagator.StEPSize = TimeSpan.FromSeconds(10);
	
	        // Slew to face the sun
	        MetaSC.sc.AttitudeRefFrame = "MJ2000";
	        Call SetSlewRate(MetaSC.sc, sunManeuver, csToSun, 1);
	    	cacheEpoch = MetaSC.sc.Epoch;
	        isCharging = 1;
	        isSunSlew  = 1;
	    End;

	    If (isSunSlew == 0 and flag == 0 and MetaSC.sc.ElapsedTimeFromEpoch(cacheEpoch) >= EARTH_MANEUVER_TIME);
	        // Reset the earth slew, swap to LVLH to track the earth
	        MetaSC.sc.AttitudeRefFrame = "LVLH";
			MetaSC.sc.AngularVelocity = {0, 0, 0};
			flag = 0;
	        isSunSlew  = -1;
		End;

	    If (isSunSlew == 1 and flag == 0 and MetaSC.sc.ElapsedTimeFromEpoch(cacheEpoch) >= SUN_MANEUVER_TIME);
			// Reset the sun slew, leave in MJ2K because sun is far away
	        MetaSC.sc.AngularVelocity = {0, 0, 0};
			flag = 0;
	        isSunSlew  = -1;
		End;
	End;
	
	
	// Fixed Attitude Reports
	If (MetaSC.ADCS.State == 1);
		//Determine contact with the ground sites first
	    //Slew to face the earth
	    MetaSC.sc.AttitudeRefFrame = "MJ2000";
	    Call SetSlewRate(MetaSC.sc, earthManeuver, csToEarth, 0);
	    cacheEpoch = MetaSC.sc.Epoch;
	    isCharging = 0;
	    isSunSlew  = 0;
	    
	    If (toDurand.Visibility(MetaSC.sc.Epoch) == 1 and inContactDurand == 0);
	        inContactDurand = 1;
	        contactVects[0].Active = 1;
	    	MetaSC.Vectors.ToDurand.Color = ColorTools.Red;
	    	MetaSC.Vectors.ToDurand.BuildVector(9,MetaSC.sc,Durand);
	    	MetaSC.Vectors.ToDurand.Active = 1;
	
	        Console.CurrentTextColor = ColorTools.LightBlue;
	        Report "Contact with Durand has begun..." to Console;
	    End; 

	    If (toSun.Visibility(MetaSC.sc.Epoch) == 1 and inSunlight == 0);
	        inSunlight = 1;
	        sunContactVect.Active = 1;
	    	MetaSC.Vectors.ToSun.BuildVector(9,MetaSC.sc,Sun);
	    	MetaSC.Vectors.ToSun.Active = 1;
	
	        Console.CurrentTextColor = ColorTools.Khaki;
	    End;

	    If (toDurand.Visibility(MetaSC.sc.Epoch) == 0 and inContactDurand == 1);
	        inContactDurand = 0;
	        contactVects[0].Active = 0;
	    	MetaSC.Vectors.ToDurand.Active = 0;
	
	        Console.CurrentTextColor = ColorTools.LightBlue;
	        Report "Contact with Durand has ended..." to Console;
	    End;

	    If (toSun.Visibility(MetaSC.sc.Epoch) == 0 and inSunlight == 1);
	        inSunlight = 0;
	        sunContactVect.Active = 0;
	    	MetaSC.Vectors.ToSun.Active = 0;
	        Console.CurrentTextColor = ColorTools.Khaki;
	    End;
	End;
	
	// Calculate total power
	MetaSC.EPS.TotalPower = 0;
	For PANEL_ITERATOR=0 to MetaSC.EPS.Panels.Count-1;
		MetaSC.EPS.TotalPower += MetaSC.EPS.Panels[PANEL_ITERATOR].Power;
	End;

	// Propagate and Generate Outputs
	
	Step MetaSC.sc;
	
	//Synchronize Epochs
	contactVects[0].Epoch = MetaSC.sc.Epoch;
	contactVects[1].Epoch = MetaSC.sc.Epoch;
	sunContactVect.Epoch = MetaSC.sc.Epoch;
	earthContactVect.Epoch = MetaSC.sc.Epoch;
	vecAntiEarth.Epoch    = MetaSC.sc.Epoch;
	vecAntiZ.Epoch        = MetaSC.sc.Epoch;
	csToEarth.Epoch       = MetaSC.sc.Epoch;
	csToSun.Epoch         = MetaSC.sc.Epoch;
	
	viewCenter.Position = MetaSC.sc.Position;
	viewCenter.Velocity = MetaSC.sc.Velocity;
	
	csToEarth.SetPositionVector(vecAntiEarth);
	csToEarth.VisualScale = 500;
	csToSun.SetPositionVector(vecAntiEarth);
	csToSun.VisualScale = 500;
	
	// Update customized status text
	wo.Shapes[0].TextOptions.Text = MetaSC.sc.EpochText + @" UTC\n" +
	                                "Sun Panel Angle: " + MetaSC.EPS.Panels[0].SunPanelAngle.Value.Format("%.1f") + @"\n" + 
	                                "Beta Angle: "      + MetaSC.sc.BetaAngle.Format("%.1f");
	
	// Update all OutputWindow objects as appropriate
	Update DataTable;
	Update PowerPlot;
	Update VwEarth;
	Switch (MetaSC.ADCS.State);
	    Case 0:
	        Update vwChangingAttitude;
	        Break;
	    Case 1:
	        Update vwFixed;
	        Break;
	End;
	
	// Record output to file
	Report MetaSC.sc.EpochText, MetaSC.EPS.Panels[0].Area,MetaSC.EPS.Panels[0].SunPanelAngle<8,3>, MetaSC.sc.Range(Sun)<8,3>, MetaSC.EPS.Panels[0].Power<8,3> to "./output/SolarPower_MetaSC.EPS.Panels[0].Power.txt";
	Report MetaSC.sc.ShadowTimes() to "./output/SolarPower_ShadowTimes.txt";
	
End;